#!/usr/bin/env bash
# ©2021 Roel Pompen

if ! ( type -f git ) > /dev/null
then
  echo "Git not installed. On ubuntu type git to install."
fi

if ! ( type -f clojure ) > /dev/null
then
  echo "Clojure not installed. Install from http://clojure.org/"
fi

function dash-2-underscore () {
  echo $1 | sed -e 's/-/_/g'
}

if [ -n "$1" ];then
    project=$1
else
    printf "Project name: "
    read project
fi

if [ -d $project ]; then
  echo "Project exists."
  exit 1
fi

projectdir=$(dash-2-underscore $project)
mkdir -p $project/src/{clj,cljs,cljc}/$projectdir
mkdir -p $project/resources/public/css
mkdir -p $project/data

cd $project

(
cat <<EOF
[{:item_nr "98345NZ845-1" :amount 123 :price 12.80}
 {:item_nr "393573P234-0" :amount 18 :price 42.95}]
EOF
) > data/items.edn

(
cat <<EOF
# $project

## An empty project made by mkproj

(when in VS code, press \`ctrl-k v\` to render this file)

## What does this project deliver

This project shows several things:

1. Hot CSS reloading
2. Hot code reloading (compile-on-save, no browser reload required)
3. RPC mechanism for bidirectional websocket to back-end
4. sample querying of CouchDB via REST interface
5. initialized GIT repository
6. one language for client (browser) and server code
7. extremely low complexity (the Abstract Syntax Tree of the code contains just under 170 nodes!)
8. extremely small project size (±320 lines of code **and** project files, not counting README)
9. package entire project into 1 file (.jar) to run everywhere
10. backend is JVM with a web-server and server-side code
11. front-end code is compiled to javascript and delivered via JVM web-server
12. JS code size while developing: less than 6MB
13. JS code size after compiling for production: ±550KB (less than 140KB gzipped)
14. segmented state map using lenses (reduces events and facilitates refactoring)
15. paginated DB access

## how to develop

1. have a linux system ready, or find out the rest by yourself :)
2. install \`clj\` from http://clojure.org/
3. make sure you have git installed
4. have Visual Studio Code installed to follow this document precisely
5. run VS code and install \`calva\` plugin, no config required
6. open your standard browser **first**
7. open this project (obviously)
8. **then** start project with \`ctrl-alt-c ctrl-alt-j\`
9. select \`Clojure CLI + Figwheel-main\`, then :fig option in next dialogue  
9a. a box might open asking for a port number; This can happen the first time; restart VS code  
9b. the running browser will show the app
10. change browser URL from port 9500 to 8000; nothing will show up
11. open \`src/clj/$project/core.clj\` and click in window
12. press \`ctrl-alt-c enter\` to compile namespace
13. type in (in CLJ REPL): \`(-main)\`
14. refresh browser
15. any changes you save lead to immediate changes in the browser

## using the CouchDB demo

1. install CouchDB
2. make database named \`sample\`
3. create document with fields "type": "person", "name": "Jack", "age": 21
4. create index (for sorting) on "name"
5. enable CORS in settings
6. use [yourhost] instead of localhost in browser from now on

## compile for distribution

1. close VS code
2. in project directory run \`clj -Moptimal\`
3. delete extraneous files: \`rm -rf target/public/cljs-out/dev\`
4. generate pom.xml with \`clj -Spom\`
5. package with \`clj -Xuberjar\`
6. run with \`java -jar target/$project.jar\`
7. open browser to http://[yourhost]:8000/


If you move the jar file, keep in mind that all paths are relative to the location from where you run, i.e. if the code opening \`data/items.edn\` is still there, you'll get an error.

## Check for outdated dependencies

Run \`clj -Moutdated\` from the project directory.
A table of suggested updates (to be put in deps.edn) might be shown.

## Study material

Lightweight intro:  
http://maria.cloud/

http://clojure.org/  
http://clojurescript.org/  
http://hoplon.io/  
https://github.com/jarohen/chord  

©2021 Roel Pompen
EOF
) > README.md

(
cat <<EOF
^{:css-dirs ["resources/public/css"]}
{:main $project.core}
EOF
) > dev.cljs.edn

(
cat <<EOF
{:deps {hoplon/hoplon {:mvn/version "7.2.0"}
        org.clojure/clojure {:mvn/version "1.10.2"}
        org.clojure/clojurescript {:mvn/version "1.10.773"}
        compojure/compojure {:mvn/version "1.6.2"}
        cljs-http/cljs-http {:mvn/version "0.1.46"}
        ring/ring {:mvn/version "1.8.2"}
        ring-cors/ring-cors {:mvn/version "0.1.13"}
        ring/ring-defaults {:mvn/version "0.3.2"}
        jarohen/chord {:mvn/version "0.8.1"}
        javax.xml.bind/jaxb-api {:mvn/version "2.4.0-b180830.0359"}}
 :paths ["src/clj" "src/cljs" "src/cljc" "target" "resources"]
 :aliases {:prod {:main-opts ["-m" "cljs.main" "-d" "target/public/cljs-out/dev" "-o" "target/public/cljs-out/dev-main.js" "-co" "cljsopts.edn" "-c" "$project.core"]}
           :optimal {:main-opts ["-m" "cljs.main" "-O" "advanced" "-d" "target/public/cljs-out/dev" "-o" "target/public/cljs-out/dev-main.js" "-co" "cljsopts.edn" "-c" "$project.core"]}
           :fig {:extra-deps {com.bhauman/figwheel-main {:mvn/version "0.2.12"}}}
           :outdated {:extra-deps {olical/depot {:mvn/version "2.1.0"}}
                      :main-opts  ["-m" "depot.outdated.main" "-e"]}
           :uberjar {:replace-deps {seancorfield/depstar {:mvn/version "2.0.165"}}
                     :exec-fn hf.depstar/uberjar
                     :exec-args {:jar "target/$project.jar"
                                 :aot true
                                 :main-class $project.core}}}}
EOF
) > deps.edn

(
cat <<EOF
{:asset-path "/cljs-out/dev"}
EOF
) > cljsopts.edn

(
cat <<EOF
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>${project}</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" type="text/css" href="css/app.css">
    <link rel="icon" href="data:;base64,iVBORw0KGgo=">
</head>
<body>
    <div id="app"></div>
    <script src="cljs-out/dev-main.js"></script>
</body>
</html>
EOF
) > resources/public/index.html

(
cat <<EOF
h1 {
  color: #1be9df;
}
EOF
) > resources/public/css/app.css

(
cat <<EOF
target/
.cpcache/
.nrepl*
pom.xml
.lsp/
.clj-kondo/
.calva/
EOF
) > .gitignore

(
cat <<EOF
(ns $project.api
  (:require [clojure.edn :as edn]))

(defmacro defrpc [f args body]
  \`(let [e# nil]
     (defn ~f ~args (try ~body (catch Exception e# {:castraexpt (ex-message e#)})))))

(defrpc get-file []
  (edn/read-string (slurp "data/items.edn")))
EOF
)  > src/clj/$projectdir/api.clj

(
cat <<EOF
(ns $project.core
  (:require [$project.handler :as handler]
            [org.httpkit.server :refer [run-server]]
            [$project.shared :refer [port]])
  (:gen-class))

(def server (atom nil))

(defn app [port]
  (run-server handler/app {:port port}))

(defn start-server
  "Start web-server."
  [port]
  (swap! server #(or % (app port))))

(defn -main [] (start-server port))
EOF
)  > src/clj/$projectdir/core.clj

(
cat <<EOF
(ns $project.handler
  (:require
   [$project.api                :as api]
   [$project.shared             :refer [server port]]
   [chord.http-kit                 :refer [wrap-websocket-handler]]
   [clojure.core.async             :refer [go <! >!]]
   [compojure.core                 :refer [defroutes GET]]
   [compojure.route                :refer [resources not-found]]
   [ring.middleware.defaults       :refer [wrap-defaults api-defaults]]
   [ring.middleware.resource       :refer [wrap-resource]]
   [ring.middleware.session        :refer [wrap-session]]
   [ring.middleware.not-modified   :refer [wrap-not-modified]]
   [ring.middleware.content-type   :refer [wrap-content-type]]
   [ring.middleware.session.cookie :refer [cookie-store]]
   [ring.util.response             :refer [content-type resource-response]]
   [ring.middleware.cors           :refer [wrap-cors]]))

(defn castra
  "Receives RPC request and calls it in api namespace."
  [{:keys [ws-channel]}]
  (go
    (let [{:keys [message error]} (<! ws-channel)
          {:keys [type f args]} message]
      (if error
        (println "Error ocurred:" error)
        (if (= type :rpc)
          (>! ws-channel (or (apply (ns-resolve '$project.api f) args) :castranil))
          (>! ws-channel "Hello client from server!"))))))

(defroutes app-routes
  (GET "/" req
    (-> "public/index.html"
        (resource-response)
        (content-type "text/html")))
  (GET "/ws" [] (-> #'castra
                    (wrap-websocket-handler {:format :transit-json})))
  (resources "/")
  (not-found "Oups! This page doesn't exist! (404 error)"))

(def app
  (-> app-routes
      (wrap-session {:store (cookie-store {:key (byte-array (map int "a 16-byte secret"))})})
      (wrap-defaults api-defaults)
      (wrap-resource "public")
      (wrap-cors :access-control-allow-origin (re-pattern (str "http://" server ":" port "/.*"))
                 :access-control-allow-methods [:get :put :post :delete])
      (wrap-content-type)
      (wrap-not-modified)))
EOF
)  > src/clj/$projectdir/handler.clj

(
cat <<EOF
(ns $project.core
  (:require [hoplon.core :as h :refer [defelem div h1 p text input
                                       button form for-tpl fieldset legend]]
            [javelin.core :as j :refer [cell cell=]]
            [$project.rpc :as rpc]))

(defelem main [_ _]
  (div :id "app"
       (h1 "Sample")
       "Gets data from file via JVM backend. "
       (button :type "button" :click #(rpc/get-file) "Get file")
       (p (text "~{rpc/file-data}"))
       (text "Gets items from CouchDB via REST interface, page ~{(inc (:curpage rpc/people-pages))}")
       (form
        (fieldset
         (legend "People " (for-tpl [[page data] (cell= (:bookmarks rpc/people-pages))]
                                    (button :type "button"
                                            :click #(rpc/get-people @page) (cell= (inc page)))))
         (for-tpl [{id :_id name :name age :age} rpc/people]
                  (div
                   (input :type "text" :value name :disabled true)
                   (input :type "text" :value age :disabled true)
                   (button :type "button" :click #(rpc/del-db @id) "Erase"))))
        (let [name (cell nil)
              age (cell nil)]
          (fieldset
           (legend "New person")
           (input :type "text" :placeholder "name"
                  :change #(reset! name (.. % -target -value))
                  :focus #(set! (.. % -target -value) nil))
           (input :type "number" :placeholder "age"
                  :change #(reset! age (int (.. % -target -value)))
                  :focus #(set! (.. % -target -value) nil))
           (button :type "button"
                   :click (fn []
                            (rpc/add-db @name @age)
                            (reset! name nil)
                            (reset! age nil))
                   "Add"))))))

(.replaceChild (.-body js/document)
               (main) (.getElementById js/document "app"))
EOF
) > src/cljs/$projectdir/core.cljs

(
cat <<EOF
(ns $project.rpc
  (:require-macros
   [javelin.core :refer [defc defc=]]
   [cljs.core.async.macros :refer [go]])
  (:require
   [$project.shared :refer [port server db-port db-server db-name]]
   [javelin.core :refer [cell]]
   [cljs-http.client :as http]
   [chord.client :refer [ws-ch]]
   [cljs.core.async :refer [<! >! close!]]))

;; CouchDB connection
(def urls (str "http://" db-server ":" db-port "/"))
(def urld (str urls db-name))
(def urlq (str urld "/_find"))
;; Merge with :json-params for authentication
(def db-auth {:basic-auth {:username "admin"
                           :password "Cl0jure!"}})

;; RPC launcher
(defc error nil)

(defn launch-fn 
  "Launches RPC call for \`f\` in backend. Return value goes into cell."
  [f cl & args]
  (go
    (let [{:keys [ws-channel error]} (<! (ws-ch (str "ws://" server ":" port "/ws")
                                                {:format :transit-json}))]
      (if error
        (js/console.log "Error:" (pr-str error))
        (do
          (>! ws-channel {:type :rpc :f f :args args})
          (let [msg (:message (<! ws-channel))]
            (cond (= msg :castranil) (reset! cl nil)
                  (some? (:castraexpt msg)) (reset! $project.rpc/error (:castraexpt msg))
                  :else (reset! cl msg)))))
      (close! ws-channel))))

;;; UUID generator of CouchDB
(defc uuids nil)

(defn get-uuid
  "Returns \`n\` or 1 UUIDs in a vector."
  [& n]
  (go (let [result
            (<! (http/get (str "http://" db-server ":" db-port "/_uuids"
                               (when (some? n) (str "?count=" (first n))))))]
        (reset! uuids (:uuids (:body result))))))

;;; CRUD: CREATE RETRIEVE UPDATE DELETE
;;; CREATE
(defn doc-add
  "Add document to CouchDB and run callback for refresh."
  [m cb]
  (go (let [uuid (-> (<! (http/get (str urls "/_uuids"))) :body :uuids first)
            result (<! (http/put (str urld "/" uuid)
                                 (merge {:json-params m} db-auth)))]
        (when-not (:success result)
          (reset! error (:body result)))
        (cb))))

;;; RETRIEVE
(defn query
  "Fire Mango query to CouchDB.
   JSON query \`m\` will be sent to DB. Result gets sent to cell \`cl\`.
   An optional funtion \`:func\` is applied to the result set.
   \`page\` is the page number to get. \`pages\` is a hash-map containing bookmarks.
   Initialize that map as nil."
  [m cl & {:keys [func page-size page pages] :or {func identity page-size 25 pages (cell :none)}}]
  (go
    (let [result
          (<! (http/post urlq
                         (merge {:json-params
                                 (merge m {:limit page-size
                                           :bookmark (if (or (nil? page)
                                                             (= page 0)) nil
                                                         (get-in @pages [:bookmarks page]))})}
                                db-auth)))
          next-bookmark (-> result :body :bookmark)]
      (when (empty? @pages) (reset! pages {:bookmarks {0 nil}}))
      (if (:success result)
        (do (reset! cl (-> result :body :docs func))
            (when (and (not= @pages :none)
                       (not (-> @pages :bookmarks vals set (contains? next-bookmark))))
              (swap! pages assoc-in [:bookmarks (inc page)]
                     next-bookmark))
            (when (not= @pages :none) (swap! pages assoc :curpage (or page 0))))
        (reset! error (:body result))))))

;;; UPDATE
(defn doc-update
  "Update document in CouchDB and run callback for refresh."
  [id m cb]
  (go (let [old (-> (<! (http/post urlq (merge {:json-params {"selector" {"_id" id}}}
                                               db-auth)))
                    :body :docs first)
            result (-> (<! (http/put (str urld "/" id)
                                     (merge {:json-params (merge old m)} db-auth))))]
        (when-not (:success result)
          (reset! error (:body result)))
        (cb))))

;;; DELETE
(defn doc-delete
  "Delete document in CouchDB and run callback for refresh."
  [id cb]
  (go (let [rev (-> (<! (http/post urlq (merge {:json-params {"selector" {"_id" id}}}
                                               db-auth)))
                    :body :docs first :_rev)
            result (<! (http/delete (str urld "/" id "?rev=" rev) db-auth))]
        (when-not (:success result)
          (reset! error (:body result)))
        (cb))))

;; segmented state + lenses
;; reduces load due to state modifications and allows easier refactoring
(defonce state
  (cell {}))

(defc= file-data   (:file-data   state) #(swap! state assoc :file-data %))
(defc= people (:people state) #(swap! state assoc :people %))
(defc  people-pages {})

;; RPC to backend
;; Cell data is overwritten, not merged
(defn get-file [] (launch-fn 'get-file file-data))

;; Database

(defn get-people
  [& [page]]
  (query {"selector"
          {"type" "person"}
          "sort" [{"name" "asc"}]}
         people
         :func (partial sort-by :name)
         :page-size 4
         :pages people-pages
         :page  page))

(defn add-db [name age] (doc-add {"type" "person"
                                  "name" name
                                  "age" age}
                                 (fn []
                                   (reset! people-pages {})
                                   (js/setTimeout get-people 500))))

(defn del-db [id] (doc-delete id (fn []
                                   (reset! people-pages {})
                                   (js/setTimeout get-people 500))))

(get-people)
EOF
) > src/cljs/$projectdir/rpc.cljs

(
cat <<EOF
(ns $project.shared)

(def server "rpompen-lt")
(def port 8000)

(def db-server "rpompen-lt")
(def db-port 5984)
(def db-name "sample")
EOF
) > src/cljc/$projectdir/shared.cljc

git init
git add .
git commit -m "Initial project"
clojure -M:prod
