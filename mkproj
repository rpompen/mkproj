#!/usr/bin/env bash
# ©2025 Roel Pompen

hostname=desktop-roel

if ! ( type -f fossil ) > /dev/null
then
  echo "Fossil not installed. On ubuntu type fossil to install."
fi

if ! ( type -f clojure ) > /dev/null
then
  echo "Clojure not installed. Install from http://clojure.org/"
fi

function dash-2-underscore () {
  echo $1 | sed -e 's/-/_/g'
}

if [ -n "$1" ];then
    project=$1
else
    printf "Project name: "
    read project
fi

if [ -d $project ]; then
  echo "Project exists."
  exit 1
fi

projectdir=$(dash-2-underscore $project)
mkdir -p $project/src/{clj,cljs,cljc}/$projectdir
mkdir -p $project/resources/public/css
mkdir -p $project/data

cd $project

(
cat <<EOF
[{:item_nr "98345NZ845-1" :amount 123 :price 12.80}
 {:item_nr "393573P234-0" :amount 18 :price 42.95}]
EOF
) > data/items.edn

(
cat <<EOF
# $project

## An empty project made by mkproj

(when in VS code, press \`ctrl-k v\` to render this file)

## What does this project deliver

This project shows several things:

1. Hot CSS reloading
2. Hot code reloading (compile-on-save, no browser reload required)
3. RPC mechanism for bidirectional websocket to back-end
4. Uses integrated Berkeley DB JE via cupboard
5. initialized Fossil repository
6. one language for client (browser) and server code
7. extremely low complexity (the Abstract Syntax Tree of the code contains just under 120 nodes with additional 100 nodes in the widgets file!)
8. extremely small project size (±250 lines of code **and** project files, not counting README and predefined widgets, which add ±280 lines)
9. package entire project into 1 file (.jar) to run everywhere
10. backend is JVM with a web-server and server-side code
11. front-end code is compiled to javascript and delivered via JVM web-server
12. JS code size while developing: less than 5MB
13. JS code size after compiling for production: ±630KB (less than 165KB gzipped)
14. segmented state map using lenses (reduces events and facilitates refactoring)

## how to develop

1. install \`clj\` from http://clojure.org/
2. start figwheel-main project using alias \`:fig\`
3. open \`src/clj/$project/core.clj\` and load/compile
4. run \`(-main)\`
5. change browser URL from port 9500 to 8000
6. any changes you save lead to immediate changes in the browser

## compile for distribution

1. close VS code
2. in project directory run \`clj -Moptimal\`
3. delete extraneous files: \`rm -rf target/public/cljs-out/dev\`
4. generate pom.xml with \`clj -Spom\`
5. package with \`clj -Xuberjar\`

If you move the jar file, keep in mind that all paths are relative to the location from where you run, i.e. if the code opening \`data/items.edn\` is still there, you'll get an error.

## Check for outdated dependencies

Run \`clj -Moutdated\` from the project directory.
A table of suggested updates (to be put in deps.edn) might be shown.

## Study material

Lightweight intro:  
http://maria.cloud/

http://clojure.org/  
http://clojurescript.org/  
http://hoplon.io/  
https://github.com/jarohen/chord  

©2025 Roel Pompen
EOF
) > README.md

(
cat <<EOF
^{:css-dirs ["resources/public/css"]}
{:main $project.core}
EOF
) > dev.cljs.edn

(
cat <<EOF
{:deps {hoplon/hoplon {:mvn/version "7.5.0"}
        org.clojure/clojure {:mvn/version "1.12.3"}
        org.clojure/clojurescript {:mvn/version "1.12.42"}
        org.clojure/core.async {:mvn/version "1.8.741"}
        http-kit/http-kit {:mvn/version "2.8.1"}
        compojure/compojure {:mvn/version "1.7.2"}
        cupboard/cupboard {:mvn/version "1.0beta1"}
        com.sleepycat/je {:mvn/version "18.3.12"}
        ring/ring {:mvn/version "1.15.3"}
        ring-cors/ring-cors {:mvn/version "0.1.13"}
        ring/ring-defaults {:mvn/version "0.7.0"}
        jarohen/chord {:mvn/version "0.8.1"}
        javax.xml.bind/jaxb-api {:mvn/version "2.4.0-b180830.0359"}}
 :paths ["src/clj" "src/cljs" "src/cljc" "target" "resources"]
 :aliases {:prod {:main-opts ["-m" "cljs.main" "-d" "target/public/cljs-out/dev" "-o" "target/public/cljs-out/dev-main.js" "-co" "cljsopts.edn" "-c" "$project.core"]}
           :optimal {:main-opts ["-m" "cljs.main" "-O" "advanced" "-d" "target/public/cljs-out/dev" "-o" "target/public/cljs-out/dev-main.js" "-co" "cljsopts.edn" "-c" "$project.core"]}
           :fig {:extra-deps {com.bhauman/figwheel-main {:mvn/version "0.2.20"}}}
           :outdated {:extra-deps {olical/depot {:mvn/version "2.4.1"}}
                      :main-opts  ["-m" "depot.outdated.main" "-e"]}
           :uberjar {:replace-deps {seancorfield/depstar {:mvn/version "2.0.165"}}
                     :exec-fn hf.depstar/uberjar
                     :exec-args {:jar "target/$project.jar"
                                 :aot true
                                 :main-class $project.core}}}}
EOF
) > deps.edn

(
cat <<EOF
{:asset-path "/cljs-out/dev"}
EOF
) > cljsopts.edn

(
cat <<EOF
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>${project}</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" type="text/css" href="css/app.css">
    <link rel="icon" href="data:;base64,iVBORw0KGgo=">
</head>
<body>
    <div id="app"></div>
    <script src="cljs-out/dev-main.js?build=0.1"></script>
</body>
</html>
EOF
) > resources/public/index.html

(
cat <<EOF
h1 {
  color: #1be9df;
}

form {
    width: 33vw;
}
EOF
) > resources/public/css/app.css

(
cat <<EOF
(ns $project.api
  (:require [clojure.edn :as edn]
            [cupboard.core :as cb]
            [cupboard.utils :refer :all]))

;; Database

(cb/open-cupboard! "store")

(cb/defpersist persoon ((:id :index :unique) (:naam :index :any) (:leeftijd :index :any)))

;; RPC

(defmacro defrpc [f args & body]
  \`(let [e# nil]
     (defn ~f ~args (try ~@body (catch Exception e# {:castraexpt (ex-message e#)})))))

(defrpc get-file [naam]
  (str naam " " (edn/read-string (slurp "data/items.edn"))))

(defrpc get-people [] (cb/query :shelf-name "personen"))

(defrpc add-db
  [name age]
  (cb/make-instance persoon [(java.util.UUID/randomUUID) name age] :shelf-name "personen"))

(defrpc del-db
  [id]
  (cb/query (= :id id)
            :shelf-name "personen"
            :callback #(cb/delete % :shelf-name "personen")))

(comment

  (add-db "Roel" 52)

  )
EOF
)  > src/clj/$projectdir/api.clj

(
cat <<EOF
(ns $project.core
  (:require [$project.handler :as handler]
            [org.httpkit.server :refer [run-server]]
            [$project.shared :refer [port]])
  (:gen-class))

(def server (atom nil))

(defn app [port]
  (run-server handler/app {:port port}))

(defn start-server
  "Start web-server."
  [port]
  (swap! server #(or % (app port))))

(defn -main [] (start-server port))
EOF
)  > src/clj/$projectdir/core.clj

(
cat <<EOF
(ns $project.handler
  (:require
   [$project.api                :as api]
   [$project.shared             :refer [server port secure?]]
   [chord.http-kit                 :refer [wrap-websocket-handler]]
   [clojure.core.async             :refer [go <! >!]]
   [compojure.core                 :refer [defroutes GET]]
   [compojure.route                :refer [resources not-found]]
   [ring.middleware.defaults       :refer [wrap-defaults api-defaults]]
   [ring.middleware.resource       :refer [wrap-resource]]
   [ring.middleware.session        :refer [wrap-session]]
   [ring.middleware.not-modified   :refer [wrap-not-modified]]
   [ring.middleware.content-type   :refer [wrap-content-type]]
   [ring.middleware.session.cookie :refer [cookie-store]]
   [ring.util.response             :refer [content-type resource-response]]
   [ring.middleware.cors           :refer [wrap-cors]]))

(defn castra
  "Receives RPC request and calls it in api namespace."
  [{:keys [ws-channel]}]
  (go
    (let [{:keys [message error]} (<! ws-channel)
          {:keys [type f args]} message]
      (if error
        (println "Error ocurred:" error)
        (if (= type :rpc)
          (>! ws-channel (or (apply (ns-resolve '$project.api f) args) :castranil))
          (>! ws-channel "Hello client from server!"))))))

(defroutes app-routes
  (GET "/" req
    (-> "public/index.html"
        (resource-response)
        (content-type "text/html")))
  (GET "/ws" [] (-> #'castra
                    (wrap-websocket-handler {:format :transit-json})))
  (resources "/")
  (not-found "Oups! This page doesn't exist! (404 error)"))

(def app
  (-> app-routes
      (wrap-session {:store (cookie-store {:key (byte-array (map int "a 16-byte secret"))})})
      (wrap-defaults api-defaults)
      (wrap-resource "public")
      (wrap-cors :access-control-allow-origin (re-pattern (str "https://" server "/"))
                 :access-control-allow-methods [:get :put :post :delete])
      (wrap-content-type)
      (wrap-not-modified)))
EOF
)  > src/clj/$projectdir/handler.clj

(
cat <<EOF
(ns $project.core
  (:require [hoplon.core :refer [defelem div h1 p text input with-init! with-timeout
                                 button form for-tpl fieldset legend]]
            [hoplon.jquery]
            [javelin.core :refer [cell cell= dosync]]
            [$project.rpc :as rpc]))

(def TO 800)
(defn- timeout [] (with-timeout TO (rpc/get-people)))

(with-init! (rpc/get-people))

(defelem main [_ _]
  (div :id "app"
       (h1 "Sample")
       "Gets data from file via JVM backend. "
       (button :type "button" :click #(rpc/get-file "Henk") "Get file")
       (p (text "~{rpc/file-data}"))
       (text "Gets items from database")
       (form
        (fieldset
         (legend "People")
         (for-tpl [{:keys [id naam leeftijd]} rpc/people]
                  (div
                   (input :type "text" :value naam :disabled true)
                   (input :type "text" :value leeftijd :disabled true)
                   (button :type "button" :click (fn [] (rpc/del-db @id)
                                                   (timeout)) "Erase"))))
        (let [name (cell nil)
              age (cell nil)]
          (fieldset
           (legend "New person")
           (input :type "text" :placeholder "name"
                  :value name
                  :change #(reset! name @%))
           (input :type "number" :placeholder "age"
                  :value age
                  :change #(reset! age (int @%)))
           (button :type "button"
                   :click (fn []
                            (rpc/add-db @name @age)
                            (reset! name nil)
                            (reset! age nil)
                            (timeout))
                   "Add"))))))

(.replaceChild (.-body js/document)
               (main) (.getElementById js/document "app"))
EOF
) > src/cljs/$projectdir/core.cljs

(
cat <<EOF
(ns $project.rpc
  (:require-macros
   [javelin.core :refer [defc defc=]]
   [cljs.core.async.macros :refer [go]])
  (:require
   [$project.shared :refer [port server secure?]]
   [javelin.core :refer [cell]]
   [chord.client :refer [ws-ch]]
   [clojure.string :as s]
   [cljs.core.async :refer [<! >! close!] :as async]))

;; RPC launcher
(defc error nil)
(defc loading #{})

(defn launch-fn
  "Launches RPC call for \`f\` in backend. Return value goes into cell."
  [f cl args]
  (go
    (let [{:keys [ws-channel error] :as call} (<! (ws-ch (str "ws" (when secure? \s) "://" server (when-not secure? (str ":" port)) "/ws")
                                                {:format :transit-json}))]
      (swap! loading conj call)
      (if error
        (js/console.log "Error:" (pr-str error))
        (do
          (>! ws-channel {:type :rpc :f f :args args})
          (let [msg (:message (<! ws-channel))]
            (cond (= msg :castranil) (reset! cl nil)
                  (some? (:castraexpt msg)) (reset! error (:castraexpt msg))
                  :else (reset! cl msg)))))
      (close! ws-channel)
      (swap! loading disj call))))

;; segmented state + lenses
;; reduces load due to state modifications and allows easier refactoring
(def state (cell {}))
(defc last-result nil)

(defc= file-data    (get-in state [:io :file-data]) #(swap! state assoc-in [:io :file-data] %))
(defc= people       (get-in state [:io :people])    #(swap! state assoc-in [:io :people] %))

;; RPC to backend
;; Cell data is overwritten, not merged
(defn get-file [& params] (launch-fn 'get-file file-data params))
(defn get-people [& params] (launch-fn 'get-people people      params))
(defn add-db     [& params] (launch-fn 'add-db     last-result params))
(defn del-db     [& params] (launch-fn 'del-db     last-result params))
EOF
) > src/cljs/$projectdir/rpc.cljs

(
cat <<EOF
(ns $project.shared)

(def secure? false)
(def server "$hostname")
(def port 8000)
EOF
) > src/cljc/$projectdir/shared.cljc

mkdir dev-doc

(
cat <<EOF
(ns $project.widgets
  (:require
   [$project.rpc :as rpc]
   [hoplon.core :refer [defelem div h1 input a img for-tpl label br text
                        if-tpl span table tr th td cond-tpl]]
   [hoplon.svg :as svg]
   [javelin.core :refer [cell cell=]]))

;;; In this fn the rpc/screen cell contains a screen full of fields.
;;; Such a screen would be empty if a key "_id" would not be found...
(defelem field
  [{:keys [source lbl id type set-once?]} _]
  (let [mail? (re-seq #"(?i).*mail.*" lbl)
        tel?  (re-seq #"(?i).*(foon|phone).*" lbl)
        initially-filled? (cell nil)
        inp (input :type (or type (cond
                                    mail? "email"
                                    tel?  "tel"
                                    :else "text"))
                   :value (cell= (get source lbl))
                   :id id
                   :disabled initially-filled?
                   :step (cell= (when (= type "number") 0.01))
                   :focus #(if (and set-once? (some? (get @source lbl)) (nil? @initially-filled?) (some? (get @source "_id")))
                             (reset! initially-filled? true)
                             (reset! initially-filled? false))
                   :change (fn [e] (swap! source assoc lbl (cond (= type "number") (js/parseFloat @e)
                                                                 (or (= type "email")
                                                                     (and (nil? type)
                                                                          mail?)) (.toLowerCase @e)
                                                                 (empty? @e) nil
                                                                 :else @e))))]
    (div :class "row"
         (div :class "col col-3"
              (label lbl))
         (if-tpl mail?
                 [(div :class "col col-8 has-email-field"
                       inp)
                  (div :class "col col-1 has-email-link"
                       (a :href (cell= (when (re-seq #".+@.+\..+" (str (get source lbl))) (str "mailto:" (get source lbl))))
                          "✉"))]
                 (div :class "col col-9"
                      inp)))))

(defelem autocomplete
  "Creates autocomplete box using cell \`items\` as either a vector of choices, or a map
   where you select key to get val."
  [{:keys [items field default cb disabled] :as attr :or {cb identity}} _]
  (let [invoer (cell "")
        zoek  (fn [re s] (re-find (re-pattern (str "(?i)^" re ".*")) s))
        subsel (cell= (->> (if (map? items) (keys items) items) (keep (partial zoek invoer)) vec))
        open (cell false)
        rnr (rand-int 2734)]
    ((div (input :type "text" :input #(reset! invoer @%)
                 :value default :disabled disabled
                 :click #(swap! open not) :id (str "compl-inp" rnr))
          (if-tpl open
                  (div :id "options" :css {:max-height "300px" :overflow-y "scroll"}
                       (for-tpl [i subsel]
                                [(span :click (fn [] (reset! field (if (map? @items) (get @items @i) @i))
                                                (set! (.-value (.getElementById js/document (str "compl-inp" rnr))) @i)
                                                (reset! open false)
                                                (cb)) i)
                                 (br)]))))
     (dissoc attr :items :field :default :cb :disabled))))

(defelem col-block
  [{col-widths :col-widths :or {col-widths [3 9]}} children]
  (if-tpl
   (cell= (and (= (count children) (count col-widths))
               (= 12 (apply + col-widths))))
   (div :class "row"
        (for-tpl [[rank column] (cell= (zipmap (range) col-widths))]
                 (div :class (cell= (str "col col-" (if (= 12 column) "12 col-6-lg" column)))
                      (nth children @rank))))
   (h1 :css {:color "red"} (text "LAYOUT-ERROR!!! ~{col-widths} kids: ~{(count children)}"))))

(defelem s-s-table
  "Sort-and-search table. Takes a seq of \`koppen\` and a seq of maps with \`data\` to present.
   Koppen should contain the keys to look for in data. \`filter-str\` and \`data\` must be a cell.
   Sorts on column head click."
  [{:keys [koppen data filter-str] :as attrs} kids]
  (let [sorted (cell nil)
        re (cell= (re-pattern (str "(?i)" filter-str)))
        subsel (cell= (if (seq filter-str)
                        (fn [rs] (keep (fn [m] (when (re-seq re (apply str (vals m))) m)) rs))
                        identity))]
    ((table
      (tr
       (for [kop koppen]
         (th :click #(reset! sorted kop) kop)))
      (for-tpl [line (cell= (if (some? sorted) (sort-by #(-> % (get sorted) str .toLowerCase) (subsel data)) (subsel data)))]
               (tr
                (for [kop koppen]
                  (cond-tpl
                   (re-seq #"(?i).*mail.*" kop) (td (input :type "mail" :disabled true :value (cell= (get line kop))))
                   (re-seq #"(?i).*Geldig.*" kop) (td (input :type "date" :disabled true :value (cell= (get line kop))))
                   :else (td (cell= (get line kop))))))))
     (dissoc attrs :koppen :data :filter-str) kids)))

(defelem line-chart
  "Expects a coll of at most 100 values, y-coords between 0..100, in a cell passed as \`:data\`"
  [{data :data :as attrs} _]
  (let [series (cell= (map #(- 100 %) data))
        steps  (cell= (map int (range 30 101 (/ 100 (dec (count data))))))
        points (cell= (apply str (map str steps (repeat ",") series (repeat " "))))
        frame  (cell= (str "130,100 30,100 " points))]
    ((svg/svg :viewBox "0 0 130 130"
              (svg/path :style "stroke:black;stroke-width:1" :d "M15,0V100M30,115h100")
              (svg/polygon :style "fill:lightgreen;stroke:lime" :points frame)
              (svg/text :style "font-size:5px" :x 30 :y 110 "test"))
     (dissoc attrs :data))))

(defelem pie-chart
  "Single value pie-chart."
  [{:keys [part color] :or {color "red"} :as attrs} _]
  (let [circumference (* 25 (/ 44 7))
        segment (* circumference part)
        css (str "stroke-dasharray:" segment " " (- circumference segment))]
    ((svg/svg :viewBox "0 0 100 100"
              (svg/circle :style css :stroke color :fill "none"
                          :stroke-width 50 :cx 50 :cy 50 :r 25))
     (dissoc attrs :part :color))))

(defelem bar-chart
  "Takes data as map. Vals will be normalized to 100."
  [{:keys [data style] :as attrs :or {style "stroke:black;stroke-width:1"}} _]
  (let [res 100
        mxval (cell= (reduce-kv (fn [acc _ v] (max acc v)) 0 data))
        normdata (cell= (into {} (map (fn [[k v]] [k (* res (/ v mxval))]) data)))
        segwidth (cell= (/  res (inc (* 2 (count data)))))
        segs (cell= (keep-indexed #(when (odd? %1) (int %2)) (vec (range 0 100 segwidth))))
        plots (cell= (into [] (map (fn [[k v] s] [k v s]) normdata segs)))]
    ((svg/svg :viewBox (str "0 0 " res " " (+ res 20))
              (svg/path :style style :d (str "M0," res "h" res))
              (for-tpl [[_ v s] plots]
                       (svg/rect :x s :y (cell= (- res v))
                                 :width segwidth :height v))
              (for-tpl [[k _ s] plots]
                       (svg/text :css {:font-size "4px"}
                                 :x s :y (+ res 10)
                                 k)))
     (dissoc attrs :data))))

(defelem widget-demo
  "dag maand q1234 knoppen"
  [_ _]
  (div
   (bar-chart :data {"Appels" 48 "Bananen" 23 "Peren" 63 "Bramen" 8}
              :width "300px" :style "stroke:red;stroke-width:1")))
EOF
) > src/cljs/$projectdir/widgets.cljs

(
cat <<EOF
# All changes applied conform input examples from hoplon.

## Input type:
text
\`\`\`
:change / :input
:value
:placeholder
\`\`\`
range
\`\`\`
:min :max :step
:value
:input
\`\`\`
select
\`\`\`
:change
:value
        option
        :selected
        :value
        "label"
\`\`\`
select
\`\`\`
:multiple true
:change event.-target.-selectedOptions supports .item.-value
        .-length

        option
        :selected
        :value
        "label"
\`\`\`
checkbox
\`\`\`
:click  Fns should return true
:value
\`\`\`
radio
\`\`\`
:click
:checked
:name
:value
\`\`\`
EOF
) > dev-doc/widgets.md

[ -d ../fossils ] || mkdir ../fossils
fossil init --project-name "$project" ../fossils/$project.fossil
fossil open -k ../fossils/$project.fossil
fossil add .
fossil ci -m "$project"
fossil set ignore-glob "target/"
clojure -M:prod

